filter {
  if [type] == "mm_receiver" {
    if "PTR" in [message] {
      grok {
        match => [ "message" , "%{NUMBER} %{TIME} PTR record for <%{IP:clientip}> exists for HELO string <%{HOSTNAME:from_server}>, %{GREEDYDATA:status}" ]
	match => [ "message" , "%{NUMBER} %{TIME} No PTR record for <%{IP:clientip}>, %{GREEDYDATA:status}" ]
        match => [ "message" , "%{NUMBER} %{TIME} PTR record for <%{IP:clientip}> exists for HELO string <%{IP:from_server}>, %{GREEDYDATA:status}" ]
        match => [ "message" , "%{NUMBER} %{TIME} Event - Cannot do PTR look up on <%{IP:clientip}>. %{GREEDYDATA:status}" ]
        match => [ "message" , "%{NUMBER} %{TIME} PTR record for <%{IP:clientip}> exists for HELO string <\[%{IP:from_server}\]>, %{GREEDYDATA:status}" ]
        tag_on_failure => [ "ptrToDo" ]
        add_tag => [ "ptr" ]
      }
      geoip {
        source => "clientip"
        target => "geoip"
        database => "/etc/logstash/GeoLiteCity.dat"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate { convert => [ "[geoip][coordinates]", "float"] }
      date { match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ] }
      geoip {
        add_tag => [ "Whois" ]
        database => "/etc/logstash/GeoIPASNum.dat"
        source => "clientip"
      }
    }
    else if "Checking user criteria" in [message] {
      grok {
        match => [ "message" , "%{NUMBER} %{TIME} Checking user criteria for Rule %{GREEDYDATA:rule_group}:%{GREEDYDATA:rule}" ]
        add_tag => [ "rule" ]
      }
    }
   else if "user invalid" in [message] {
     grok {
      match => [ "message" , "%{NUMBER} %{TIME} TX: <%{NUMBER:smtp_code} %{GREEDYDATA:rule} %{EMAILADDRESS:emailaddress} refused: %{GREEDYDATA:reason}>" ]
      add_tag => [ "invalid_user" ]
    }
  }
  else if "triggered." in [message] {
    grok {
      match => [ "message", "%{NUMBER} %{TIME}   %{GREEDYDATA:rule_group}:%{GREEDYDATA:rule} triggered."]
      add_tag => [ "triggeredRule" ]
      }
    }
  else if "DOS" in [message] {
    grok {
      match => [ "message", "%{NUMBER} %{TIME} %{WORD:component} - %{GREEDYDATA:reason}. <%{IPORHOST:clientip}> %{GREEDYDATA}" ]
      match => [ "message", "%{NUMBER} %{TIME} %{GREEDYDATA}<%{IPORHOST:clientip}> \[%{WORD:component}\] %{GREEDYDATA:reason} \(" ]
      match => [ "message", "%{NUMBER} %{TIME} %{GREEDYDATA}<%{IPORHOST:clientip}> \[%{WORD:component}\] %{GREEDYDATA:reason}. %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NUMBER:connection_counter:int}" ]
      match => [ "message", "%{NUMBER} %{TIME} <%{IP:clientip}> \[%{WORD:component}\] %{GREEDYDATA:reason}." ]
      add_tag => [ "DOS" ]
      tag_on_failure => [ "DOSTODO" ]
      }
    geoip {
	source => "clientip"
        target => "geoip"
        database => "/etc/logstash/GeoLiteCity.dat"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
      mutate { convert => [ "[geoip][coordinates]", "float"] }
      date { match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ] }
      geoip {
	add_tag => [ "Whois" ]
        database => "/etc/logstash/GeoIPASNum.dat"
        source => "clientip"
      }
    }
  else if "WSAE" in [message] {
    grok {
      match => [ "message" , "%{GREEDYDATA:error_type} - %{NUMBER:error_number:int} - %{WORD:error_description}" ]
      add_tag => [ "connError" ]
    }
  }
  else if "DHA" in [message] {
    grok { 
      match => [ "message" , "%{NUMBER} %{TIME} %{GREEDYDATA:reason} <%{IPORHOST:clientip}> \[%{WORD:component}\] %{GREEDYDATA}"]
      match => [ "message" , "%{NUMBER} %{TIME} <%{IPORHOST:clientip}> \[%{WORD:component}\] %{GREEDYDATA:reason}. %{NOTSPACE} %{NOTSPACE} %{NOTSPACE} %{NUMBER:connection_counter:int}" ]
      match => [ "message" , "%{NUMBER} %{TIME} <%{IP:clientip}> \[%{WORD:component}\] %{GREEDYDATA:reason}." ]
      add_tag => [ "DHA" ]
      tag_on_failure => [ "DHAToDo" ]
      }
    geoip {
	source => "clientip"
        target => "geoip"
        database => "/etc/logstash/GeoLiteCity.dat"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
      mutate { convert => [ "[geoip][coordinates]", "float"] }
      date { match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ] }
      geoip {
	add_tag => [ "Whois" ]
        database => "/etc/logstash/GeoIPASNum.dat"
       	source => "clientip"
      }
  }
  else if "RX:" in [message] {
    grok { 
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{WORD:smtp_command}>" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{GREEDYDATA:smtp_command}:<%{GREEDYDATA:emailaddress}>>" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{GREEDYDATA:smtp_command}: <%{GREEDYDATA:emailaddress}>>" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{GREEDYDATA:smtp_command} %{IPORHOST:from_server}>" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{GREEDYDATA:smtp_command}:<%{GREEDYDATA:emailaddress}> %{WORD}=%{NUMBER:size:int}" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{GREEDYDATA:smtp_command} \[%{IPORHOST:fromserver}\]>" ]
      add_tag => [ "RX" ]
      tag_on_failure => [ "RXToDo"]
     }
  }
  else if "TX:" in [message] {
    grok {
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{NUMBER:smtp_code} %{GREEDYDATA:reason}>" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{NUMBER:smtp_code}-%{IPORHOST:to_server} %{WORD:smtp_command} %{IPORHOST:from_server} \(%{IPORHOST:clientip}\)" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{NUMBER:smtp_code}-%{IPORHOST:to_server} %{WORD:smtp_command} \[%{IPORHOST:from_server}\] \(%{IPORHOST:clientip}\)" ]
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD}: <%{NUMBER:smtp_code}-%{GREEDYDATA:smtp_command}>" ]
      add_tag => [ "TX" ]
      tag_on_failure => [ "TXToDo" ]
    }
  }
  else if "RefID" in [message] {
    drop { }
  }
  else if "SpamProfiler" in [message] {
    grok {
      match => [ "message", "%{NUMBER} %{TIME} %{GREEDYDATA}. %{WORD}: %{GREEDYDATA:spam_type},%{GREEDYDATA}" ]
      add_tag => [ "spamProfilerType" ]
      tag_on_failure => [ "spamProfilerToDo" ]
    }
  }
  else if "client" in [message] {
    grok {
      match => [ "message", "%{NUMBER} %{TIME} %{GREEDYDATA:error} %{IPORHOST:clientip}" ]
      add_tag => [ "clientError" ]
    }
  }
  else if [message] == "Socket closed unexpectedly" {
    grok {
      match => [ "message", "%{GREEDYDATA:error}"]
      add_tag => [ "socketClosed" ]
    }
  }
  else if "contains" in [message] {
     grok {
     match => [ "message", "%{NUMBER} %{TIME} %{GREEDYDATA:rule} - %{GREEDYDATA:status}" ]
      add_tag => [ "fixedMessage" ]
    }
  }
  else if "Alert" in [message] {
    grok {
      match => [ "message" , "%{NUMBER} %{TIME} %{WORD} - %{GREEDYDATA:alert}: %{GREEDYDATA:status}" ]
      add_tag => [ "alert" ]
    }
  }
#  else if "SIZE=" in [message] {
#    drop { }
#  }
#  else if "Engine behind" in [message] {
#    drop { }
#  }
#  else if "Ptrs" in [message] {
#    drop { }
#  }
#  else if "RefID" in [message] {
#    drop { }
#  }
#  else if "end with ." in [message] {
#    drop { }
#  }
#  else if "250 SIZE" in [message] {
#    drop { }
#  }
#  else if "Trustwave SEG Ready" in [message] {
#    drop { }
#  }
#  else if "TLS" in [message] {
#    drop { }
#  }
#  else if "Message data received" in [message] {
#    drop { }
#  }
#  else if "for new message" in [message] {
#    drop { }
#  }
#  else if "DKIM" in [message] {
#    drop { }
#  }
#  else if "Message accepted for delivery" in [message] {
#    drop { }
#  }
#  else if "Thread exiting" in [message] {
#    drop { }
#  }
#  else if "250 sender ok" in [message] {
#    drop { } 
#  }
#  else if "Queues" in [message] {
#    drop { } 
#  }
#  else if "RCPT TO:" in [message] {
#    drop { }
#  }
#  else if "recipient ok" in [message] {
#    drop { }
#  }
#  else if "on interface" in [message] {
#    drop { }
#  }
#  else if "<DATA>" in [message] {
#    drop { }
#  }
#  else if "<QUIT>" in [message] {
#    drop { }
#  }
#  else if "normal processing" in [message] {
#    drop { }
#  }
#  else if [message] == ">" {
#    drop { }
#  }
  else { drop { } }
  }
}
